# -*- coding: utf-8 -*-
"""Vizualization.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-xa4rjNo42iRN4DFNnHXOFFDRecu07XZ

# Visualization
"""

data = pd.read_csv("test.ft.txt", sep="\t", header=None, names=["text"])
print("First 5 rows of the dataset:")
print(data.head())
print("\nData types and info:")
print(data.info())
print("\nNull value counts:")
print(data.isnull().sum())
print("\nRandom sample from the dataset:")
print(data.sample(5))

import pandas as pd
import matplotlib.pyplot as plt
data = pd.read_csv("test.ft.txt", sep="\t", header=None, names=["text"])
data['label'] = data['text'].str.extract(r'(__label__\d)')
data['review'] = data['text'].str.replace(r'__label__\d ', '', regex=True)
print(data.head())

sentiment_counts = data['label'].value_counts()
sentiment_counts.plot(kind='bar', color=['skyblue', 'salmon'])
plt.title("Sentiment Distribution")
plt.xlabel("Sentiment Labels")
plt.ylabel("Number of Reviews")
plt.xticks([0, 1], ['Negative (1-2 Stars)', 'Positive (4-5 Stars)'], rotation=0)
plt.show()

!pip install wordcloud

from wordcloud import WordCloud
positive_reviews = " ".join(data[data['label'] == '__label__2']['review'].astype(str))
negative_reviews = " ".join(data[data['label'] == '__label__1']['review'].astype(str))
positive_wordcloud = WordCloud(width=800, height=400, background_color='white').generate(positive_reviews)
negative_wordcloud = WordCloud(width=800, height=400, background_color='black', colormap='Reds').generate(negative_reviews)

plt.figure(figsize=(16, 8))

plt.subplot(1, 2, 1)
plt.imshow(positive_wordcloud, interpolation="bilinear")
plt.title("Word Cloud for Positive Reviews")
plt.axis("off")

plt.subplot(1, 2, 2)
plt.imshow(negative_wordcloud, interpolation="bilinear")
plt.title("Word Cloud for Negative Reviews")
plt.axis("off")

plt.show()

data['review_length'] = data['review'].str.split().apply(len)

positive_lengths = data[data['label'] == '__label__2']['review_length']
negative_lengths = data[data['label'] == '__label__1']['review_length']

plt.figure(figsize=(12, 6))
plt.hist(positive_lengths, bins=30, alpha=0.6, label="Positive Reviews", color="skyblue")
plt.hist(negative_lengths, bins=30, alpha=0.6, label="Negative Reviews", color="salmon")
plt.title("Review Length Distribution")
plt.xlabel("Number of Words")
plt.ylabel("Frequency")
plt.legend(loc="upper right")
plt.show()

from sklearn.feature_extraction.text import CountVectorizer

def get_top_ngrams(corpus, n=None, ngram_range=(2, 2)):
    vec = CountVectorizer(ngram_range=ngram_range, stop_words='english').fit(corpus)
    bag_of_words = vec.transform(corpus)
    sum_words = bag_of_words.sum(axis=0)
    words_freq = [(word, sum_words[0, idx]) for word, idx in vec.vocabulary_.items()]
    words_freq = sorted(words_freq, key=lambda x: x[1], reverse=True)
    return words_freq[:n]

top_positive_bigrams = get_top_ngrams(data[data['label'] == '__label__2']['review'], n=10)
top_negative_bigrams = get_top_ngrams(data[data['label'] == '__label__1']['review'], n=10)

import seaborn as sns

positive_df = pd.DataFrame(top_positive_bigrams, columns=['Bigram', 'Frequency'])
negative_df = pd.DataFrame(top_negative_bigrams, columns=['Bigram', 'Frequency'])

plt.figure(figsize=(14, 6))
plt.subplot(1, 2, 1)
sns.barplot(x='Frequency', y='Bigram', data=positive_df, color="skyblue")
plt.title("Top Bigrams in Positive Reviews")

plt.subplot(1, 2, 2)
sns.barplot(x='Frequency', y='Bigram', data=negative_df, color="salmon")
plt.title("Top Bigrams in Negative Reviews")

plt.tight_layout()
plt.show()

!pip install langdetect

from langdetect import detect
from langdetect.lang_detect_exception import LangDetectException
from collections import Counter

def detect_language(text):
    try:
        return detect(text)
    except LangDetectException:
        return "unknown"

data['language'] = data['review'].apply(detect_language)
language_counts = Counter(data['language'])

language_df = pd.DataFrame(language_counts.items(), columns=['Language', 'Frequency']).sort_values(by='Frequency', ascending=False)

plt.figure(figsize=(12, 6))
sns.barplot(x='Frequency', y='Language', data=language_df, palette="viridis")
plt.title("Language Distribution in Reviews")
plt.xlabel("Number of Reviews")
plt.ylabel("Language")
plt.show()

import re

def extract_star_rating(review):
    match = re.match(r'(\d)-', review)
    if match:
        return int(match.group(1))
    return None

data['star_rating'] = data['review'].apply(extract_star_rating)

star_data = data.dropna(subset=['star_rating'])

plt.figure(figsize=(10, 6))
sns.countplot(x='star_rating', hue='label', data=star_data, palette=["salmon", "skyblue"])
plt.title("Sentiment by Star Rating")
plt.xlabel("Star Rating")
plt.ylabel("Number of Reviews")
plt.legend(title="Sentiment", labels=["Negative (1-2 Stars)", "Positive (4-5 Stars)"])
plt.show()